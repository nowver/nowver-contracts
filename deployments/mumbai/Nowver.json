{
  "address": "0x6e1a05D4F3f87891CE7EFF1EaBA0684EF2b8b216",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataUri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "edition",
          "type": "uint256"
        }
      ],
      "name": "BuyToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_metadataBaseURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23df58a6563d842acbf13c5a4d4fbb5bc358233e2a7df73d104c2302b8cf4ab2",
  "receipt": {
    "to": null,
    "from": "0x20BfE90996ED4ce6382E75A85B3d6989D5Eaf814",
    "contractAddress": "0x6e1a05D4F3f87891CE7EFF1EaBA0684EF2b8b216",
    "transactionIndex": 0,
    "gasUsed": "2365280",
    "logsBloom": "0x
    "blockHash": "0x0b507a502d6b95aec3cceaefc869d68928f8b46e43d38ce9a77a7d39aaa7b337",
    "transactionHash": "0x23df58a6563d842acbf13c5a4d4fbb5bc358233e2a7df73d104c2302b8cf4ab2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 19542500,
        "transactionHash": "0x23df58a6563d842acbf13c5a4d4fbb5bc358233e2a7df73d104c2302b8cf4ab2",
        "address": "0x6e1a05D4F3f87891CE7EFF1EaBA0684EF2b8b216",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000020bfe90996ed4ce6382e75a85b3d6989d5eaf814"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0b507a502d6b95aec3cceaefc869d68928f8b46e43d38ce9a77a7d39aaa7b337"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 19542500,
        "transactionHash": "0x23df58a6563d842acbf13c5a4d4fbb5bc358233e2a7df73d104c2302b8cf4ab2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000020bfe90996ed4ce6382e75a85b3d6989d5eaf814",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001ed6f0784b100000000000000000000000000000000000000000000000000000f06cb78c58c40000000000000000000000000000000000000000000000000000dc77ea4761f90000000000000000000000000000000000000000000000000000d195c7140db40000000000000000000000000000000000000000000000000000fb4edabfad0900",
        "logIndex": 1,
        "blockHash": "0x0b507a502d6b95aec3cceaefc869d68928f8b46e43d38ce9a77a7d39aaa7b337"
      }
    ],
    "blockNumber": 19542500,
    "cumulativeGasUsed": "2365280",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://bafybeihikqchaf2qonipwy4wmcxj375fxco7f2qp5e4e3f3dygbu223pxq.ipfs.dweb.link/"
  ],
  "solcInputHash": "c27342761f50fec62eea3081446c4f18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataUri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"edition\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_metadataBaseURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burn(address,uint256,uint256)\":{\"details\":\"can only be called when contract is not paused\",\"params\":{\"account\":\"address of the user owning the token\",\"id\":\"uint256 id of the token to burn\",\"value\":\"quantity of tokens to burn\"}},\"burnBatch(address,uint256[],uint256[])\":{\"details\":\"can only be called when contract is not paused\",\"params\":{\"account\":\"address of the user owning the token\",\"ids\":\"uint256[] ids of the tokens to burn\",\"values\":\"uint256[] quantity of tokens to burn\"}},\"exists(uint256)\":{\"params\":{\"_id\":\"uint256 id of the token to verify\"},\"returns\":{\"_0\":\"bool\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(uint256)\":{\"details\":\"_id must be registered with registerToken first\",\"params\":{\"_id\":\"uint256 id of the desired token\"},\"returns\":{\"_0\":\"uint256 instance id of the token minted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"can only be called by the contract owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerToken(uint256,uint256,uint256)\":{\"details\":\"_id should not already be registered,         _supply must be greater than 0,         _id should be equal to (tokensCount + 1)\",\"params\":{\"_id\":\"uint256 id of the token to register, should be incremental\",\"_price\":\"uint256 price of the token\",\"_supply\":\"uint256 max circulating supply\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setURI(string)\":{\"params\":{\"_metadataBaseURI\":\"string ipfs hash\"}},\"supportsInterface(bytes4)\":{\"details\":\"this methods takes a bytes\",\"params\":{\"interfaceId\":\"bytes4 value of the interface to check\"},\"returns\":{\"_0\":\"Documents the return variables of a contract\\u2019s function state variable\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"can only be called by the contract owner\"},\"uri(uint256)\":{\"details\":\"URIs are defined in RFC 3986.     URIs are assumed to be deterministically generated based on token ID\",\"returns\":{\"_0\":\"URI string\"}}},\"stateVariables\":{\"metadataBaseURI\":{\"details\":\"ipfs hash or api uri\",\"return\":\"metadataBaseURI link\",\"returns\":{\"_0\":\"metadataBaseURI link\"}},\"tokens\":{\"details\":\"mapping of id to TokenData structs, token is not registered if TokenData.supply is set to 0\"},\"tokensCount\":{\"details\":\"used to track the number of tokens created without looping over the tokens mapping\",\"return\":\"tokensCount uin256\",\"returns\":{\"_0\":\"tokensCount uin256\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BuyToken(address,uint256,uint256)\":{\"notice\":\"BuyToken emits when a user calls the payable function Mint()\"}},\"kind\":\"user\",\"methods\":{\"burn(address,uint256,uint256)\":{\"notice\":\"burn sends a token to address 0x0 so that no one can ever access it\"},\"burnBatch(address,uint256[],uint256[])\":{\"notice\":\"burnBatch sends multiple tokens to address 0x0 so that no one can ever access it\"},\"exists(uint256)\":{\"notice\":\"exists verifies a token of type _id is registered\"},\"metadataBaseURI()\":{\"notice\":\"metadataBaseURI holds the URI pointing to the contracts metadata\"},\"mint(uint256)\":{\"notice\":\"mint creates a new token of type _id, reverts if all occurences of the token are already minted\"},\"pause()\":{\"notice\":\"pause sets the pause state to true\"},\"registerToken(uint256,uint256,uint256)\":{\"notice\":\"registerToken creates a new TokenData type for a given _id with         a max _supply\"},\"setURI(string)\":{\"notice\":\"setUri replaces _uri with newUri\"},\"supportsInterface(bytes4)\":{\"notice\":\"supportsInterface is the ERC165 compliant method indicating this contract supports an ERC1155 interface\"},\"tokens(uint256)\":{\"notice\":\"tokens holds the configuration of all tokens\"},\"tokensCount()\":{\"notice\":\"tokensCount is a counter of registered tokens\"},\"unpause()\":{\"notice\":\"unpause sets the contract state to Unpaused\"},\"uri(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given token.\"},\"withdraw()\":{\"notice\":\"withdraw sends the contract balance to the contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Nowver.sol\":\"Nowver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xedf8db444aa542739a0aabe8243a4e8100003aacba9783637a75f16bb556ab44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/INowver.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\ninterface INowver {\\n    /// @notice BuyToken emits when a user calls the payable function Mint()\\n    /// @dev emits an event containing buyer address, tokenId type id and edition occurence id\\n    /// @param buyer address of the buyer\\n    /// @param tokenId uint256 id of the token type minted\\n    /// @param edition uint256 id of the token occurence minted\\n    event BuyToken(address buyer, uint256 tokenId, uint256 edition);\\n\\n    /// @notice TokenData is a struct holding the configuration for a registered token\\n    /// @dev TokenData ensures a token cannot be minted without being registered first\\n    ///     and cannot be minted more than TokenData.supply is configured to\\n    struct TokenData {\\n        uint256 supply;\\n        uint256 count;\\n        uint256 price;\\n    }\\n\\n    /// @notice mint creates a new token of type _id, reverts if all occurences of the token are already minted\\n    /// @dev _id must be registered with registerToken first\\n    /// @param _id uint256 id of the desired token\\n    /// @return uint256 instance id of the token minted\\n    function mint(uint256 _id) external payable returns (uint256);\\n\\n    /// @notice registerToken creates a new TokenData type for a given _id with a max _supply\\n    /// @dev _id should not already be registered, _supply must be greater than 0\\n    /// @param _id uint256 id of the token to register, should be incremental\\n    /// @param _supply uint256 max circulating supply\\n    /// @param _price uint256 price of the token\\n    function registerToken(\\n        uint256 _id,\\n        uint256 _supply,\\n        uint256 _price\\n    ) external;\\n\\n    /// @notice exists verifies a token of type _id is registered\\n    /// @param _id uint256 id of the token to verify\\n    /// @return bool\\n    function exists(uint256 _id) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x418400e6eddab0ad84fb5b4177782e17485cf65cc5806fcdefab66f44fe0bf40\",\"license\":\"Unlicense\"},\"contracts/Nowver.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./utils/NowverUtils.sol\\\";\\nimport \\\"./INowver.sol\\\";\\n\\ncontract Nowver is ERC1155, ERC1155Burnable, NowverUtils, INowver {\\n    using Strings for uint256;\\n\\n    /// @notice metadataBaseURI holds the URI pointing to the contracts metadata\\n    /// @dev ipfs hash or api uri\\n    /// @return metadataBaseURI link\\n    string public metadataBaseURI;\\n\\n    /// @notice tokens holds the configuration of all tokens\\n    /// @dev mapping of id to TokenData structs, token is not registered if TokenData.supply is set to 0\\n    mapping(uint256 => TokenData) public tokens;\\n\\n    /// @notice tokensCount is a counter of registered tokens\\n    /// @dev used to track the number of tokens created without looping over the tokens mapping\\n    /// @return tokensCount uin256\\n    uint256 public tokensCount = 0;\\n\\n    constructor(string memory _metadataUri) ERC1155(_metadataUri) {\\n        // Setting the default metadataBaseUri happens in the ERC1155 contract constructor\\n    }\\n\\n    /// @notice supportsInterface is the ERC165 compliant method indicating this contract supports an ERC1155 interface\\n    /// @dev this methods takes a bytes\\n    /// @param interfaceId bytes4 value of the interface to check\\n    /// @return Documents the return variables of a contract\\u2019s function state variable\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC1155) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n    /// @dev URIs are defined in RFC 3986.\\n    ///     URIs are assumed to be deterministically generated based on token ID\\n    /// @return URI string\\n    function uri(uint256 _id) public view override returns (string memory) {\\n        return string(abi.encodePacked(metadataBaseURI, _id.toString(), \\\".json\\\"));\\n    }\\n\\n    /// @notice setUri replaces _uri with newUri\\n    /// @param _metadataBaseURI string ipfs hash\\n    function setURI(string memory _metadataBaseURI) public onlyOwner {\\n        _setURI(_metadataBaseURI);\\n    }\\n\\n    /// @notice _setUri internal method called by setUri and constructor\\n    /// @param _metadataBaseURI string ipfs hash\\n    function _setURI(string memory _metadataBaseURI) internal override {\\n        metadataBaseURI = _metadataBaseURI;\\n    }\\n\\n    /// @notice mint creates a new token of type _id, reverts if all occurences of the token are already minted\\n    /// @dev _id must be registered with registerToken first\\n    /// @param _id uint256 id of the desired token\\n    /// @return uint256 instance id of the token minted\\n    function mint(uint256 _id) public payable override returns (uint256) {\\n        require(exists(_id), \\\"Nowver: token doesn't exist\\\");\\n        require(msg.value == tokens[_id].price, \\\"Nowver: incorrect price\\\");\\n        require(tokens[_id].count + 1 <= tokens[_id].supply, \\\"Nowver: out of bonds\\\");\\n\\n        tokens[_id].count += 1;\\n        uint256 edition = tokens[_id].count;\\n\\n        _mint(_msgSender(), _id, 1, \\\"\\\");\\n        return edition;\\n    }\\n\\n    /// @notice registerToken creates a new TokenData type for a given _id with\\n    ///         a max _supply\\n    /// @dev _id should not already be registered,\\n    ///         _supply must be greater than 0,\\n    ///         _id should be equal to (tokensCount + 1)\\n    /// @param _id uint256 id of the token to register, should be incremental\\n    /// @param _supply uint256 max circulating supply\\n    /// @param _price uint256 price of the token\\n    function registerToken(\\n        uint256 _id,\\n        uint256 _supply,\\n        uint256 _price\\n    ) public override onlyOwner {\\n        require(tokens[_id].supply == 0, \\\"Nowver: token already registered\\\");\\n        require(_supply > 0, \\\"Nowver: supply must be greater than 0\\\");\\n        tokens[_id].supply = _supply;\\n        tokens[_id].price = _price;\\n        tokensCount += 1;\\n    }\\n\\n    /// @notice withdraw sends the contract balance to the contract owner\\n    function withdraw() public {\\n        // get the amount stored in this contract\\n        uint256 amount = address(this).balance;\\n        address payable contractOwner = payable(owner());\\n\\n        // send the balance to contract owner\\n        // Owner can receive Ether since the address of owner is payable\\n        (bool success, ) = contractOwner.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Nowver: failed to withdraw\\\");\\n    }\\n\\n    /// @notice exists verifies a token of type _id is registered\\n    /// @param _id uint256 id of the token to verify\\n    /// @return bool\\n    function exists(uint256 _id) public view override returns (bool) {\\n        return tokens[_id].supply != 0;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer. This includes\\n    // minting and burning, as well as batched variants, overriden with\\n    /// whenNotPaused modifier\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override whenNotPaused {}\\n\\n    /// @notice burn sends a token to address 0x0 so that no one can ever access it\\n    /// @dev can only be called when contract is not paused\\n    /// @param account address of the user owning the token\\n    /// @param id uint256 id of the token to burn\\n    /// @param value quantity of tokens to burn\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public override whenNotPaused {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    /// @notice burnBatch sends multiple tokens to address 0x0 so that no one can ever access it\\n    /// @dev can only be called when contract is not paused\\n    /// @param account address of the user owning the token\\n    /// @param ids uint256[] ids of the tokens to burn\\n    /// @param values uint256[] quantity of tokens to burn\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public override whenNotPaused {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xfdc2e101cebd05006aa37bc63fec17fee7f09edcd4caababd4f3cd0bf60a4b9f\",\"license\":\"Unlicense\"},\"contracts/utils/NowverUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract NowverUtils is Ownable, Pausable {\\n    /// @notice pause sets the pause state to true\\n    /// @dev can only be called by the contract owner\\n    function pause() public onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice unpause sets the contract state to Unpaused\\n    /// @dev can only be called by the contract owner\\n    function unpause() public onlyOwner whenPaused {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xd28d07c42b98b3fbf10535948dd95b400b72e236565a7e7dc33e0ae583641622\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260006006553480156200001657600080fd5b5060405162002a3838038062002a38833981016040819052620000399162000176565b80620000458162000065565b5062000051336200007e565b506003805460ff60a01b19169055620002a5565b80516200007a906004906020840190620000d0565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000de9062000252565b90600052602060002090601f0160209004810192826200010257600085556200014d565b82601f106200011d57805160ff19168380011785556200014d565b828001600101855582156200014d579182015b828111156200014d57825182559160200191906001019062000130565b506200015b9291506200015f565b5090565b5b808211156200015b576000815560010162000160565b600060208083850312156200018a57600080fd5b82516001600160401b0380821115620001a257600080fd5b818501915085601f830112620001b757600080fd5b815181811115620001cc57620001cc6200028f565b604051601f8201601f19908116603f01168101908382118183101715620001f757620001f76200028f565b8160405282815288868487010111156200021057600080fd5b600093505b8284101562000234578484018601518185018701529285019262000215565b82841115620002465760008684830101525b98975050505050505050565b600181811c908216806200026757607f821691505b602082108114156200028957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61278380620002b56000396000f3fe60806040526004361061014a5760003560e01c8063715018a6116100b6578063a64ed8ba1161006f578063a64ed8ba146103d7578063bf303173146103ed578063e985e9c51461040d578063f242432a14610456578063f2fde38b14610476578063f5298aca1461049657600080fd5b8063715018a61461033d5780638456cb59146103525780638da5cb5b146103675780639f3d1a2a1461038f578063a0712d68146103a4578063a22cb465146103b757600080fd5b80633f4ba83a116101085780633f4ba83a146102365780634e1273f41461024b5780634f558e79146102785780634f64b2be146102a75780635c975abb146102fe5780636b20c4541461031d57600080fd5b8062fdd58e1461014f57806301ffc9a71461018257806302fe5305146101b25780630e89341c146101d45780632eb2c2d6146102015780633ccfd60b14610221575b600080fd5b34801561015b57600080fd5b5061016f61016a366004611e9b565b6104b6565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611fc9565b61054d565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004612003565b61055e565b005b3480156101e057600080fd5b506101f46101ef36600461204c565b610594565b60405161017991906122aa565b34801561020d57600080fd5b506101d261021c366004611cdc565b6105c8565b34801561022d57600080fd5b506101d261065f565b34801561024257600080fd5b506101d261071e565b34801561025757600080fd5b5061026b610266366004611ef8565b6107a2565b6040516101799190612272565b34801561028457600080fd5b506101a261029336600461204c565b600090815260056020526040902054151590565b3480156102b357600080fd5b506102e36102c236600461204c565b60056020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610179565b34801561030a57600080fd5b50600354600160a01b900460ff166101a2565b34801561032957600080fd5b506101d2610338366004611deb565b6108cc565b34801561034957600080fd5b506101d2610939565b34801561035e57600080fd5b506101d261096d565b34801561037357600080fd5b506003546040516001600160a01b039091168152602001610179565b34801561039b57600080fd5b506101f46109c9565b61016f6103b236600461204c565b610a57565b3480156103c357600080fd5b506101d26103d2366004611e5f565b610bd3565b3480156103e357600080fd5b5061016f60065481565b3480156103f957600080fd5b506101d2610408366004612065565b610caa565b34801561041957600080fd5b506101a2610428366004611ca9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561046257600080fd5b506101d2610471366004611d86565b610dc2565b34801561048257600080fd5b506101d2610491366004611c8e565b610e07565b3480156104a257600080fd5b506101d26104b1366004611ec5565b610e9f565b60006001600160a01b0383166105275760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061055882610f0c565b92915050565b6003546001600160a01b031633146105885760405162461bcd60e51b815260040161051e9061248e565b61059181610f5c565b50565b606060046105a183610f73565b6040516020016105b2929190612114565b6040516020818303038152906040529050919050565b6001600160a01b0385163314806105e457506105e48533610428565b61064b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161051e565b6106588585858585611079565b5050505050565b4760006106746003546001600160a01b031690565b90506000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50509050806107195760405162461bcd60e51b815260206004820152601a60248201527f4e6f777665723a206661696c656420746f207769746864726177000000000000604482015260640161051e565b505050565b6003546001600160a01b031633146107485760405162461bcd60e51b815260040161051e9061248e565b600354600160a01b900460ff166107985760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161051e565b6107a0611223565b565b606081518351146108075760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161051e565b6000835167ffffffffffffffff8111156108235761082361267b565b60405190808252806020026020018201604052801561084c578160200160208202803683370190505b50905060005b84518110156108c45761089785828151811061087057610870612665565b602002602001015185838151811061088a5761088a612665565b60200260200101516104b6565b8282815181106108a9576108a9612665565b60209081029190910101526108bd8161260a565b9050610852565b509392505050565b600354600160a01b900460ff16156108f65760405162461bcd60e51b815260040161051e90612392565b6001600160a01b03831633148061091257506109128333610428565b61092e5760405162461bcd60e51b815260040161051e90612349565b6107198383836112c0565b6003546001600160a01b031633146109635760405162461bcd60e51b815260040161051e9061248e565b6107a0600061144e565b6003546001600160a01b031633146109975760405162461bcd60e51b815260040161051e9061248e565b600354600160a01b900460ff16156109c15760405162461bcd60e51b815260040161051e90612392565b6107a06114a0565b600480546109d6906125a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a02906125a2565b8015610a4f5780601f10610a2457610100808354040283529160200191610a4f565b820191906000526020600020905b815481529060010190602001808311610a3257829003601f168201915b505050505081565b600081815260056020526040812054610ab25760405162461bcd60e51b815260206004820152601b60248201527f4e6f777665723a20746f6b656e20646f65736e27742065786973740000000000604482015260640161051e565b6000828152600560205260409020600201543414610b125760405162461bcd60e51b815260206004820152601760248201527f4e6f777665723a20696e636f7272656374207072696365000000000000000000604482015260640161051e565b600082815260056020526040902080546001918201549091610b34919061252f565b1115610b795760405162461bcd60e51b81526020600482015260146024820152734e6f777665723a206f7574206f6620626f6e647360601b604482015260640161051e565b6001600560008481526020019081526020016000206001016000828254610ba0919061252f565b90915550506000828152600560205260409020600101546105583384600160405180602001604052806000815250611505565b336001600160a01b0383161415610c3e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161051e565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6003546001600160a01b03163314610cd45760405162461bcd60e51b815260040161051e9061248e565b60008381526005602052604090205415610d305760405162461bcd60e51b815260206004820181905260248201527f4e6f777665723a20746f6b656e20616c72656164792072656769737465726564604482015260640161051e565b60008211610d8e5760405162461bcd60e51b815260206004820152602560248201527f4e6f777665723a20737570706c79206d75737420626520677265617465722074604482015264068616e20360dc1b606482015260840161051e565b60008381526005602052604081208381556002018290556006805460019290610db890849061252f565b9091555050505050565b6001600160a01b038516331480610dde5750610dde8533610428565b610dfa5760405162461bcd60e51b815260040161051e90612349565b6106588585858585611615565b6003546001600160a01b03163314610e315760405162461bcd60e51b815260040161051e9061248e565b6001600160a01b038116610e965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051e565b6105918161144e565b600354600160a01b900460ff1615610ec95760405162461bcd60e51b815260040161051e90612392565b6001600160a01b038316331480610ee55750610ee58333610428565b610f015760405162461bcd60e51b815260040161051e90612349565b610719838383611732565b60006001600160e01b03198216636cdb3d1360e11b1480610f3d57506001600160e01b031982166303a24d0760e21b145b8061055857506301ffc9a760e01b6001600160e01b0319831614610558565b8051610f6f906004906020840190611add565b5050565b606081610f975750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610fc15780610fab8161260a565b9150610fba9050600a83612547565b9150610f9b565b60008167ffffffffffffffff811115610fdc57610fdc61267b565b6040519080825280601f01601f191660200182016040528015611006576020820181803683370190505b5090505b84156110715761101b60018361255b565b9150611028600a86612625565b61103390603061252f565b60f81b81838151811061104857611048612665565b60200101906001600160f81b031916908160001a90535061106a600a86612547565b945061100a565b949350505050565b815183511461109a5760405162461bcd60e51b815260040161051e906124c3565b6001600160a01b0384166110c05760405162461bcd60e51b815260040161051e906123bc565b336110cf818787878787611833565b60005b84518110156111b55760008582815181106110ef576110ef612665565b60200260200101519050600085838151811061110d5761110d612665565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561115d5760405162461bcd60e51b815260040161051e90612444565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061119a90849061252f565b92505081905550505050806111ae9061260a565b90506110d2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611205929190612285565b60405180910390a461121b81878787878761185d565b505050505050565b600354600160a01b900460ff166112735760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161051e565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166112e65760405162461bcd60e51b815260040161051e90612401565b80518251146113075760405162461bcd60e51b815260040161051e906124c3565b600033905061132a81856000868660405180602001604052806000815250611833565b60005b83518110156113ef57600084828151811061134a5761134a612665565b60200260200101519050600084838151811061136857611368612665565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156113b85760405162461bcd60e51b815260040161051e90612305565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806113e78161260a565b91505061132d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611440929190612285565b60405180910390a450505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600354600160a01b900460ff16156114ca5760405162461bcd60e51b815260040161051e90612392565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112a33390565b6001600160a01b0384166115655760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161051e565b3361158581600087611576886119c8565b61157f886119c8565b87611833565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906115b590849061252f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461065881600087878787611a13565b6001600160a01b03841661163b5760405162461bcd60e51b815260040161051e906123bc565b3361164b818787611576886119c8565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561168c5760405162461bcd60e51b815260040161051e90612444565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906116c990849061252f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611729828888888888611a13565b50505050505050565b6001600160a01b0383166117585760405162461bcd60e51b815260040161051e90612401565b3361178781856000611769876119c8565b611772876119c8565b60405180602001604052806000815250611833565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156117c85760405162461bcd60e51b815260040161051e90612305565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600354600160a01b900460ff161561121b5760405162461bcd60e51b815260040161051e90612392565b6001600160a01b0384163b1561121b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118a190899089908890889088906004016121cf565b602060405180830381600087803b1580156118bb57600080fd5b505af19250505080156118eb575060408051601f3d908101601f191682019092526118e891810190611fe6565b60015b611998576118f7612691565b806308c379a01415611931575061190c6126ad565b806119175750611933565b8060405162461bcd60e51b815260040161051e91906122aa565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161051e565b6001600160e01b0319811663bc197c8160e01b146117295760405162461bcd60e51b815260040161051e906122bd565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a0257611a02612665565b602090810291909101015292915050565b6001600160a01b0384163b1561121b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a57908990899088908890889060040161222d565b602060405180830381600087803b158015611a7157600080fd5b505af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190611fe6565b60015b611aad576118f7612691565b6001600160e01b0319811663f23a6e6160e01b146117295760405162461bcd60e51b815260040161051e906122bd565b828054611ae9906125a2565b90600052602060002090601f016020900481019282611b0b5760008555611b51565b82601f10611b2457805160ff1916838001178555611b51565b82800160010185558215611b51579182015b82811115611b51578251825591602001919060010190611b36565b50611b5d929150611b61565b5090565b5b80821115611b5d5760008155600101611b62565b600067ffffffffffffffff831115611b9057611b9061267b565b604051611ba7601f8501601f1916602001826125dd565b809150838152848484011115611bbc57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114611beb57600080fd5b919050565b600082601f830112611c0157600080fd5b81356020611c0e8261250b565b604051611c1b82826125dd565b8381528281019150858301600585901b87018401881015611c3b57600080fd5b60005b85811015611c5a57813584529284019290840190600101611c3e565b5090979650505050505050565b600082601f830112611c7857600080fd5b611c8783833560208501611b76565b9392505050565b600060208284031215611ca057600080fd5b611c8782611bd4565b60008060408385031215611cbc57600080fd5b611cc583611bd4565b9150611cd360208401611bd4565b90509250929050565b600080600080600060a08688031215611cf457600080fd5b611cfd86611bd4565b9450611d0b60208701611bd4565b9350604086013567ffffffffffffffff80821115611d2857600080fd5b611d3489838a01611bf0565b94506060880135915080821115611d4a57600080fd5b611d5689838a01611bf0565b93506080880135915080821115611d6c57600080fd5b50611d7988828901611c67565b9150509295509295909350565b600080600080600060a08688031215611d9e57600080fd5b611da786611bd4565b9450611db560208701611bd4565b93506040860135925060608601359150608086013567ffffffffffffffff811115611ddf57600080fd5b611d7988828901611c67565b600080600060608486031215611e0057600080fd5b611e0984611bd4565b9250602084013567ffffffffffffffff80821115611e2657600080fd5b611e3287838801611bf0565b93506040860135915080821115611e4857600080fd5b50611e5586828701611bf0565b9150509250925092565b60008060408385031215611e7257600080fd5b611e7b83611bd4565b915060208301358015158114611e9057600080fd5b809150509250929050565b60008060408385031215611eae57600080fd5b611eb783611bd4565b946020939093013593505050565b600080600060608486031215611eda57600080fd5b611ee384611bd4565b95602085013595506040909401359392505050565b60008060408385031215611f0b57600080fd5b823567ffffffffffffffff80821115611f2357600080fd5b818501915085601f830112611f3757600080fd5b81356020611f448261250b565b604051611f5182826125dd565b8381528281019150858301600585901b870184018b1015611f7157600080fd5b600096505b84871015611f9b57611f8781611bd4565b835260019690960195918301918301611f76565b5096505086013592505080821115611fb257600080fd5b50611fbf85828601611bf0565b9150509250929050565b600060208284031215611fdb57600080fd5b8135611c8781612737565b600060208284031215611ff857600080fd5b8151611c8781612737565b60006020828403121561201557600080fd5b813567ffffffffffffffff81111561202c57600080fd5b8201601f8101841361203d57600080fd5b61107184823560208401611b76565b60006020828403121561205e57600080fd5b5035919050565b60008060006060848603121561207a57600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b838110156120c1578151875295820195908201906001016120a5565b509495945050505050565b600081518084526120e4816020860160208601612572565b601f01601f19169290920160200192915050565b6000815161210a818560208601612572565b9290920192915050565b600080845481600182811c91508083168061213057607f831692505b602080841082141561215057634e487b7160e01b86526022600452602486fd5b8180156121645760018114612175576121a2565b60ff198616895284890196506121a2565b60008b81526020902060005b8681101561219a5781548b820152908501908301612181565b505084890196505b5050505050506121c66121b582866120f8565b64173539b7b760d91b815260050190565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906121fb90830186612091565b828103606084015261220d8186612091565b9050828103608084015261222181856120cc565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612267908301846120cc565b979650505050505050565b602081526000611c876020830184612091565b6040815260006122986040830185612091565b82810360208401526121c68185612091565b602081526000611c8760208301846120cc565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b600067ffffffffffffffff8211156125255761252561267b565b5060051b60200190565b6000821982111561254257612542612639565b500190565b6000826125565761255661264f565b500490565b60008282101561256d5761256d612639565b500390565b60005b8381101561258d578181015183820152602001612575565b8381111561259c576000848401525b50505050565b600181811c908216806125b657607f821691505b602082108114156125d757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff811182821017156126035761260361267b565b6040525050565b600060001982141561261e5761261e612639565b5060010190565b6000826126345761263461264f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156126aa5760046000803e5060005160e01c5b90565b600060443d10156126bb5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126eb57505050505090565b82850191508151818111156127035750505050505090565b843d870101602082850101111561271d5750505050505090565b61272c602082860101876125dd565b509095945050505050565b6001600160e01b03198116811461059157600080fdfea264697066735822122047cb12ac35f1511fc4b18028f34710bd734fd81b1e0112dfd199d2362c7b92f664736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061014a5760003560e01c8063715018a6116100b6578063a64ed8ba1161006f578063a64ed8ba146103d7578063bf303173146103ed578063e985e9c51461040d578063f242432a14610456578063f2fde38b14610476578063f5298aca1461049657600080fd5b8063715018a61461033d5780638456cb59146103525780638da5cb5b146103675780639f3d1a2a1461038f578063a0712d68146103a4578063a22cb465146103b757600080fd5b80633f4ba83a116101085780633f4ba83a146102365780634e1273f41461024b5780634f558e79146102785780634f64b2be146102a75780635c975abb146102fe5780636b20c4541461031d57600080fd5b8062fdd58e1461014f57806301ffc9a71461018257806302fe5305146101b25780630e89341c146101d45780632eb2c2d6146102015780633ccfd60b14610221575b600080fd5b34801561015b57600080fd5b5061016f61016a366004611e9b565b6104b6565b6040519081526020015b60405180910390f35b34801561018e57600080fd5b506101a261019d366004611fc9565b61054d565b6040519015158152602001610179565b3480156101be57600080fd5b506101d26101cd366004612003565b61055e565b005b3480156101e057600080fd5b506101f46101ef36600461204c565b610594565b60405161017991906122aa565b34801561020d57600080fd5b506101d261021c366004611cdc565b6105c8565b34801561022d57600080fd5b506101d261065f565b34801561024257600080fd5b506101d261071e565b34801561025757600080fd5b5061026b610266366004611ef8565b6107a2565b6040516101799190612272565b34801561028457600080fd5b506101a261029336600461204c565b600090815260056020526040902054151590565b3480156102b357600080fd5b506102e36102c236600461204c565b60056020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610179565b34801561030a57600080fd5b50600354600160a01b900460ff166101a2565b34801561032957600080fd5b506101d2610338366004611deb565b6108cc565b34801561034957600080fd5b506101d2610939565b34801561035e57600080fd5b506101d261096d565b34801561037357600080fd5b506003546040516001600160a01b039091168152602001610179565b34801561039b57600080fd5b506101f46109c9565b61016f6103b236600461204c565b610a57565b3480156103c357600080fd5b506101d26103d2366004611e5f565b610bd3565b3480156103e357600080fd5b5061016f60065481565b3480156103f957600080fd5b506101d2610408366004612065565b610caa565b34801561041957600080fd5b506101a2610428366004611ca9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561046257600080fd5b506101d2610471366004611d86565b610dc2565b34801561048257600080fd5b506101d2610491366004611c8e565b610e07565b3480156104a257600080fd5b506101d26104b1366004611ec5565b610e9f565b60006001600160a01b0383166105275760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b600061055882610f0c565b92915050565b6003546001600160a01b031633146105885760405162461bcd60e51b815260040161051e9061248e565b61059181610f5c565b50565b606060046105a183610f73565b6040516020016105b2929190612114565b6040516020818303038152906040529050919050565b6001600160a01b0385163314806105e457506105e48533610428565b61064b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161051e565b6106588585858585611079565b5050505050565b4760006106746003546001600160a01b031690565b90506000816001600160a01b03168360405160006040518083038185875af1925050503d80600081146106c3576040519150601f19603f3d011682016040523d82523d6000602084013e6106c8565b606091505b50509050806107195760405162461bcd60e51b815260206004820152601a60248201527f4e6f777665723a206661696c656420746f207769746864726177000000000000604482015260640161051e565b505050565b6003546001600160a01b031633146107485760405162461bcd60e51b815260040161051e9061248e565b600354600160a01b900460ff166107985760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161051e565b6107a0611223565b565b606081518351146108075760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161051e565b6000835167ffffffffffffffff8111156108235761082361267b565b60405190808252806020026020018201604052801561084c578160200160208202803683370190505b50905060005b84518110156108c45761089785828151811061087057610870612665565b602002602001015185838151811061088a5761088a612665565b60200260200101516104b6565b8282815181106108a9576108a9612665565b60209081029190910101526108bd8161260a565b9050610852565b509392505050565b600354600160a01b900460ff16156108f65760405162461bcd60e51b815260040161051e90612392565b6001600160a01b03831633148061091257506109128333610428565b61092e5760405162461bcd60e51b815260040161051e90612349565b6107198383836112c0565b6003546001600160a01b031633146109635760405162461bcd60e51b815260040161051e9061248e565b6107a0600061144e565b6003546001600160a01b031633146109975760405162461bcd60e51b815260040161051e9061248e565b600354600160a01b900460ff16156109c15760405162461bcd60e51b815260040161051e90612392565b6107a06114a0565b600480546109d6906125a2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a02906125a2565b8015610a4f5780601f10610a2457610100808354040283529160200191610a4f565b820191906000526020600020905b815481529060010190602001808311610a3257829003601f168201915b505050505081565b600081815260056020526040812054610ab25760405162461bcd60e51b815260206004820152601b60248201527f4e6f777665723a20746f6b656e20646f65736e27742065786973740000000000604482015260640161051e565b6000828152600560205260409020600201543414610b125760405162461bcd60e51b815260206004820152601760248201527f4e6f777665723a20696e636f7272656374207072696365000000000000000000604482015260640161051e565b600082815260056020526040902080546001918201549091610b34919061252f565b1115610b795760405162461bcd60e51b81526020600482015260146024820152734e6f777665723a206f7574206f6620626f6e647360601b604482015260640161051e565b6001600560008481526020019081526020016000206001016000828254610ba0919061252f565b90915550506000828152600560205260409020600101546105583384600160405180602001604052806000815250611505565b336001600160a01b0383161415610c3e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161051e565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6003546001600160a01b03163314610cd45760405162461bcd60e51b815260040161051e9061248e565b60008381526005602052604090205415610d305760405162461bcd60e51b815260206004820181905260248201527f4e6f777665723a20746f6b656e20616c72656164792072656769737465726564604482015260640161051e565b60008211610d8e5760405162461bcd60e51b815260206004820152602560248201527f4e6f777665723a20737570706c79206d75737420626520677265617465722074604482015264068616e20360dc1b606482015260840161051e565b60008381526005602052604081208381556002018290556006805460019290610db890849061252f565b9091555050505050565b6001600160a01b038516331480610dde5750610dde8533610428565b610dfa5760405162461bcd60e51b815260040161051e90612349565b6106588585858585611615565b6003546001600160a01b03163314610e315760405162461bcd60e51b815260040161051e9061248e565b6001600160a01b038116610e965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161051e565b6105918161144e565b600354600160a01b900460ff1615610ec95760405162461bcd60e51b815260040161051e90612392565b6001600160a01b038316331480610ee55750610ee58333610428565b610f015760405162461bcd60e51b815260040161051e90612349565b610719838383611732565b60006001600160e01b03198216636cdb3d1360e11b1480610f3d57506001600160e01b031982166303a24d0760e21b145b8061055857506301ffc9a760e01b6001600160e01b0319831614610558565b8051610f6f906004906020840190611add565b5050565b606081610f975750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610fc15780610fab8161260a565b9150610fba9050600a83612547565b9150610f9b565b60008167ffffffffffffffff811115610fdc57610fdc61267b565b6040519080825280601f01601f191660200182016040528015611006576020820181803683370190505b5090505b84156110715761101b60018361255b565b9150611028600a86612625565b61103390603061252f565b60f81b81838151811061104857611048612665565b60200101906001600160f81b031916908160001a90535061106a600a86612547565b945061100a565b949350505050565b815183511461109a5760405162461bcd60e51b815260040161051e906124c3565b6001600160a01b0384166110c05760405162461bcd60e51b815260040161051e906123bc565b336110cf818787878787611833565b60005b84518110156111b55760008582815181106110ef576110ef612665565b60200260200101519050600085838151811061110d5761110d612665565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561115d5760405162461bcd60e51b815260040161051e90612444565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061119a90849061252f565b92505081905550505050806111ae9061260a565b90506110d2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611205929190612285565b60405180910390a461121b81878787878761185d565b505050505050565b600354600160a01b900460ff166112735760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161051e565b6003805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166112e65760405162461bcd60e51b815260040161051e90612401565b80518251146113075760405162461bcd60e51b815260040161051e906124c3565b600033905061132a81856000868660405180602001604052806000815250611833565b60005b83518110156113ef57600084828151811061134a5761134a612665565b60200260200101519050600084838151811061136857611368612665565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156113b85760405162461bcd60e51b815260040161051e90612305565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806113e78161260a565b91505061132d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611440929190612285565b60405180910390a450505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600354600160a01b900460ff16156114ca5760405162461bcd60e51b815260040161051e90612392565b6003805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112a33390565b6001600160a01b0384166115655760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161051e565b3361158581600087611576886119c8565b61157f886119c8565b87611833565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906115b590849061252f565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461065881600087878787611a13565b6001600160a01b03841661163b5760405162461bcd60e51b815260040161051e906123bc565b3361164b818787611576886119c8565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561168c5760405162461bcd60e51b815260040161051e90612444565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906116c990849061252f565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611729828888888888611a13565b50505050505050565b6001600160a01b0383166117585760405162461bcd60e51b815260040161051e90612401565b3361178781856000611769876119c8565b611772876119c8565b60405180602001604052806000815250611833565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156117c85760405162461bcd60e51b815260040161051e90612305565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600354600160a01b900460ff161561121b5760405162461bcd60e51b815260040161051e90612392565b6001600160a01b0384163b1561121b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906118a190899089908890889088906004016121cf565b602060405180830381600087803b1580156118bb57600080fd5b505af19250505080156118eb575060408051601f3d908101601f191682019092526118e891810190611fe6565b60015b611998576118f7612691565b806308c379a01415611931575061190c6126ad565b806119175750611933565b8060405162461bcd60e51b815260040161051e91906122aa565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161051e565b6001600160e01b0319811663bc197c8160e01b146117295760405162461bcd60e51b815260040161051e906122bd565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611a0257611a02612665565b602090810291909101015292915050565b6001600160a01b0384163b1561121b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611a57908990899088908890889060040161222d565b602060405180830381600087803b158015611a7157600080fd5b505af1925050508015611aa1575060408051601f3d908101601f19168201909252611a9e91810190611fe6565b60015b611aad576118f7612691565b6001600160e01b0319811663f23a6e6160e01b146117295760405162461bcd60e51b815260040161051e906122bd565b828054611ae9906125a2565b90600052602060002090601f016020900481019282611b0b5760008555611b51565b82601f10611b2457805160ff1916838001178555611b51565b82800160010185558215611b51579182015b82811115611b51578251825591602001919060010190611b36565b50611b5d929150611b61565b5090565b5b80821115611b5d5760008155600101611b62565b600067ffffffffffffffff831115611b9057611b9061267b565b604051611ba7601f8501601f1916602001826125dd565b809150838152848484011115611bbc57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114611beb57600080fd5b919050565b600082601f830112611c0157600080fd5b81356020611c0e8261250b565b604051611c1b82826125dd565b8381528281019150858301600585901b87018401881015611c3b57600080fd5b60005b85811015611c5a57813584529284019290840190600101611c3e565b5090979650505050505050565b600082601f830112611c7857600080fd5b611c8783833560208501611b76565b9392505050565b600060208284031215611ca057600080fd5b611c8782611bd4565b60008060408385031215611cbc57600080fd5b611cc583611bd4565b9150611cd360208401611bd4565b90509250929050565b600080600080600060a08688031215611cf457600080fd5b611cfd86611bd4565b9450611d0b60208701611bd4565b9350604086013567ffffffffffffffff80821115611d2857600080fd5b611d3489838a01611bf0565b94506060880135915080821115611d4a57600080fd5b611d5689838a01611bf0565b93506080880135915080821115611d6c57600080fd5b50611d7988828901611c67565b9150509295509295909350565b600080600080600060a08688031215611d9e57600080fd5b611da786611bd4565b9450611db560208701611bd4565b93506040860135925060608601359150608086013567ffffffffffffffff811115611ddf57600080fd5b611d7988828901611c67565b600080600060608486031215611e0057600080fd5b611e0984611bd4565b9250602084013567ffffffffffffffff80821115611e2657600080fd5b611e3287838801611bf0565b93506040860135915080821115611e4857600080fd5b50611e5586828701611bf0565b9150509250925092565b60008060408385031215611e7257600080fd5b611e7b83611bd4565b915060208301358015158114611e9057600080fd5b809150509250929050565b60008060408385031215611eae57600080fd5b611eb783611bd4565b946020939093013593505050565b600080600060608486031215611eda57600080fd5b611ee384611bd4565b95602085013595506040909401359392505050565b60008060408385031215611f0b57600080fd5b823567ffffffffffffffff80821115611f2357600080fd5b818501915085601f830112611f3757600080fd5b81356020611f448261250b565b604051611f5182826125dd565b8381528281019150858301600585901b870184018b1015611f7157600080fd5b600096505b84871015611f9b57611f8781611bd4565b835260019690960195918301918301611f76565b5096505086013592505080821115611fb257600080fd5b50611fbf85828601611bf0565b9150509250929050565b600060208284031215611fdb57600080fd5b8135611c8781612737565b600060208284031215611ff857600080fd5b8151611c8781612737565b60006020828403121561201557600080fd5b813567ffffffffffffffff81111561202c57600080fd5b8201601f8101841361203d57600080fd5b61107184823560208401611b76565b60006020828403121561205e57600080fd5b5035919050565b60008060006060848603121561207a57600080fd5b505081359360208301359350604090920135919050565b600081518084526020808501945080840160005b838110156120c1578151875295820195908201906001016120a5565b509495945050505050565b600081518084526120e4816020860160208601612572565b601f01601f19169290920160200192915050565b6000815161210a818560208601612572565b9290920192915050565b600080845481600182811c91508083168061213057607f831692505b602080841082141561215057634e487b7160e01b86526022600452602486fd5b8180156121645760018114612175576121a2565b60ff198616895284890196506121a2565b60008b81526020902060005b8681101561219a5781548b820152908501908301612181565b505084890196505b5050505050506121c66121b582866120f8565b64173539b7b760d91b815260050190565b95945050505050565b6001600160a01b0386811682528516602082015260a0604082018190526000906121fb90830186612091565b828103606084015261220d8186612091565b9050828103608084015261222181856120cc565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612267908301846120cc565b979650505050505050565b602081526000611c876020830184612091565b6040815260006122986040830185612091565b82810360208401526121c68185612091565b602081526000611c8760208301846120cc565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b600067ffffffffffffffff8211156125255761252561267b565b5060051b60200190565b6000821982111561254257612542612639565b500190565b6000826125565761255661264f565b500490565b60008282101561256d5761256d612639565b500390565b60005b8381101561258d578181015183820152602001612575565b8381111561259c576000848401525b50505050565b600181811c908216806125b657607f821691505b602082108114156125d757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff811182821017156126035761260361267b565b6040525050565b600060001982141561261e5761261e612639565b5060010190565b6000826126345761263461264f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156126aa5760046000803e5060005160e01c5b90565b600060443d10156126bb5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156126eb57505050505090565b82850191508151818111156127035750505050505090565b843d870101602082850101111561271d5750505050505090565b61272c602082860101876125dd565b509095945050505050565b6001600160e01b03198116811461059157600080fdfea264697066735822122047cb12ac35f1511fc4b18028f34710bd734fd81b1e0112dfd199d2362c7b92f664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burn(address,uint256,uint256)": {
        "details": "can only be called when contract is not paused",
        "params": {
          "account": "address of the user owning the token",
          "id": "uint256 id of the token to burn",
          "value": "quantity of tokens to burn"
        }
      },
      "burnBatch(address,uint256[],uint256[])": {
        "details": "can only be called when contract is not paused",
        "params": {
          "account": "address of the user owning the token",
          "ids": "uint256[] ids of the tokens to burn",
          "values": "uint256[] quantity of tokens to burn"
        }
      },
      "exists(uint256)": {
        "params": {
          "_id": "uint256 id of the token to verify"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(uint256)": {
        "details": "_id must be registered with registerToken first",
        "params": {
          "_id": "uint256 id of the desired token"
        },
        "returns": {
          "_0": "uint256 instance id of the token minted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "can only be called by the contract owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerToken(uint256,uint256,uint256)": {
        "details": "_id should not already be registered,         _supply must be greater than 0,         _id should be equal to (tokensCount + 1)",
        "params": {
          "_id": "uint256 id of the token to register, should be incremental",
          "_price": "uint256 price of the token",
          "_supply": "uint256 max circulating supply"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setURI(string)": {
        "params": {
          "_metadataBaseURI": "string ipfs hash"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "this methods takes a bytes",
        "params": {
          "interfaceId": "bytes4 value of the interface to check"
        },
        "returns": {
          "_0": "Documents the return variables of a contract’s function state variable"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "can only be called by the contract owner"
      },
      "uri(uint256)": {
        "details": "URIs are defined in RFC 3986.     URIs are assumed to be deterministically generated based on token ID",
        "returns": {
          "_0": "URI string"
        }
      }
    },
    "stateVariables": {
      "metadataBaseURI": {
        "details": "ipfs hash or api uri",
        "return": "metadataBaseURI link",
        "returns": {
          "_0": "metadataBaseURI link"
        }
      },
      "tokens": {
        "details": "mapping of id to TokenData structs, token is not registered if TokenData.supply is set to 0"
      },
      "tokensCount": {
        "details": "used to track the number of tokens created without looping over the tokens mapping",
        "return": "tokensCount uin256",
        "returns": {
          "_0": "tokensCount uin256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BuyToken(address,uint256,uint256)": {
        "notice": "BuyToken emits when a user calls the payable function Mint()"
      }
    },
    "kind": "user",
    "methods": {
      "burn(address,uint256,uint256)": {
        "notice": "burn sends a token to address 0x0 so that no one can ever access it"
      },
      "burnBatch(address,uint256[],uint256[])": {
        "notice": "burnBatch sends multiple tokens to address 0x0 so that no one can ever access it"
      },
      "exists(uint256)": {
        "notice": "exists verifies a token of type _id is registered"
      },
      "metadataBaseURI()": {
        "notice": "metadataBaseURI holds the URI pointing to the contracts metadata"
      },
      "mint(uint256)": {
        "notice": "mint creates a new token of type _id, reverts if all occurences of the token are already minted"
      },
      "pause()": {
        "notice": "pause sets the pause state to true"
      },
      "registerToken(uint256,uint256,uint256)": {
        "notice": "registerToken creates a new TokenData type for a given _id with         a max _supply"
      },
      "setURI(string)": {
        "notice": "setUri replaces _uri with newUri"
      },
      "supportsInterface(bytes4)": {
        "notice": "supportsInterface is the ERC165 compliant method indicating this contract supports an ERC1155 interface"
      },
      "tokens(uint256)": {
        "notice": "tokens holds the configuration of all tokens"
      },
      "tokensCount()": {
        "notice": "tokensCount is a counter of registered tokens"
      },
      "unpause()": {
        "notice": "unpause sets the contract state to Unpaused"
      },
      "uri(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given token."
      },
      "withdraw()": {
        "notice": "withdraw sends the contract balance to the contract owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 221,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 227,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 229,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 121,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "_paused",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2147,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "metadataBaseURI",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2153,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "tokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(TokenData)2099_storage)"
      },
      {
        "astId": 2157,
        "contract": "contracts/Nowver.sol:Nowver",
        "label": "tokensCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(TokenData)2099_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct INowver.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)2099_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenData)2099_storage": {
        "encoding": "inplace",
        "label": "struct INowver.TokenData",
        "members": [
          {
            "astId": 2094,
            "contract": "contracts/Nowver.sol:Nowver",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2096,
            "contract": "contracts/Nowver.sol:Nowver",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2098,
            "contract": "contracts/Nowver.sol:Nowver",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}